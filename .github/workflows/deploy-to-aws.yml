name: Deploy

on:
  push:
    branches:
      - "main"
      - "ci-deploy-to-aws-ec2"

env:
  APP_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/app

jobs:
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Log in to GitHub Packages
        run: echo ${{ secrets.PERSONAL_ACCESS_TOKEN }} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Pull image
        run: |
          docker pull ${{ env.APP_IMAGE }} || true

      - name: Build image
        run: |
          docker build -t ${{ env.APP_IMAGE }} --cache-from ${{ env.APP_IMAGE }} .

      - name: Push image
        run: |
          docker push ${{ env.APP_IMAGE }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Generate .env
        run: |
          echo DEBUG=0 >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo APP_IMAGE=${{ env.APP_IMAGE }} >> .env
          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy image
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml ubuntu@${{ secrets.REMOTE_INSTANCE_IP }}:/src
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.REMOTE_INSTANCE_IP }} << 'ENDSSH'
            cd /src
            source .env
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            docker pull $WEB_IMAGE
            docker-compose up -d
          ENDSSH
